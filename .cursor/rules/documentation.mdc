---
description: Documentation Guidelines for TypeScript Library
globs: docs/**, **/*.md, src/**/*.ts
alwaysApply: false
---
# Documentation Guidelines

Guidelines for creating and maintaining documentation for this TypeScript library.

## Documentation Structure

- Maintain VitePress structure in the `docs/` directory
- Keep navigation organized in `.vitepress/config.ts`
- Use subdirectories for organizing related documentation topics
- Maintain clear separation between API docs and guides

## API Documentation

- Document all exported functions, classes, and types with JSDoc
- Include parameter descriptions, return types, and examples
- Use `@example` tags to show usage examples
- Document potential errors and edge cases
- Describe function behavior clearly and concisely

## Code Documentation

- Document all public interfaces with JSDoc
- Add implementation notes for complex algorithms
- Explain non-obvious design decisions
- Include references to specific patterns or techniques used
- Provide context for non-obvious optimizations

## Markdown Standards

- Use proper markdown headings and hierarchy
- Include code examples with syntax highlighting
- Use tables for structured information when appropriate
- Include proper cross-references between documentation pages
- Format code with appropriate language highlighting

## VitePress Configuration

- Don't modify the VitePress theme without explicit request
- Update sidebar navigation when adding new documentation
- Set appropriate base URL for GitHub Pages deployment
- Preserve existing documentation features and components

## README & Examples

- Keep README up-to-date with installation and usage instructions
- Update features list when adding new functionality
- Provide clear, runnable examples that demonstrate practical use cases
- Include both simple and advanced examples with context and explanation
- Use realistic scenarios that follow best practices

## Changelog

- Don't manually update the CHANGELOG.md file
- Let semantic-release handle changelog generation
- Ensure commit messages follow conventional commits format
- Reference issues in commit messages when relevant

## Documentation Style

- Use consistent terminology throughout documentation
- Keep language clear and concise with active voice
- Define technical terms when first used
- Include diagrams for complex concepts when helpful
- Break large documents into logical sections

## Documentation Updates

- Update documentation when changing public APIs
- Remove documentation for deprecated features
- Mark experimental features clearly
- Document breaking changes thoroughly
- Provide migration guides for breaking changes