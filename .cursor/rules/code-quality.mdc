---
description: TypeScript and Code Quality Guidelines
globs: src/**, test/**, **/*.ts
alwaysApply: false
---
# TypeScript and Code Quality Guidelines

Guidelines on TypeScript usage, code quality, and architectural patterns.

## TypeScript Development

- Maintain strict typing throughout the codebase
- Export public APIs only from index.ts files
- Use TypeScript interface patterns for public APIs
- Avoid using `any` - use `unknown` when type is not known
- Leverage the type system to prevent errors at compile time
- Separate CLI-specific logic from core functionality

## TypeScript Typing

- Use types for unions, intersections, and utility types
- Leverage generics to create reusable typed components
- Implement type guards for runtime type checking
- Use explicit return types for public functions
- Apply literal types for restricted values
- Implement enums for fixed sets of related values

## Advanced Typing

- Use mapped types for type transformations
- Implement conditional types for type-based logic
- Apply type inference correctly
- Use TypeScript utility types (Partial, Required, Pick, etc.)
- Define recursive types for nested structures
- Apply type templating for generic components

## Software Architecture

- Follow the Single Responsibility Principle (SRP)
- Implement modular architecture with clear boundaries
- Organize code following separation of concerns
- Maintain a layered architecture when appropriate
- Separate domain logic from infrastructure
- Apply SOLID principles in design

## Design Patterns

- Use factory patterns for complex object creation
- Implement Builder pattern for objects with multiple configurations
- Apply Singleton pattern only when strictly necessary
- Use Observer patterns for event handling
- Implement Strategy patterns for interchangeable behaviors
- Use decorators to extend functionality

## Naming Conventions

- Use PascalCase for class, interface, and type names
- Apply camelCase for variable, property, and function names
- Use UPPER_SNAKE_CASE for constants and enum values
- Prefix 'I' for interfaces only when necessary for clarity
- Prefix 'T' for generic types when it helps clarify
- Apply meaningful suffixes: `Service`, `Repository`, `Manager`, `Factory`

## Error Handling

- Create custom error hierarchy when appropriate
- Use discriminated unions for typed errors
- Implement Result pattern for operations that may fail
- Document error behavior in public interfaces
- Use exceptions for exceptional errors, not control flow
- Provide descriptive and actionable error messages

## Domain Modeling

- Create domain models that represent business concepts
- Implement value objects for immutable concepts
- Use entities for objects with unique identity
- Define aggregates to maintain domain consistency
- Implement DTOs for data transfer between layers
- Apply domain invariants through validations

## State Management

- Design for immutability when possible
- Implement patterns for immutable state updates
- Centralize state management when appropriate
- Clearly define state flows and transitions
- Encapsulate state changes within components
- Use state machine patterns for complex flows