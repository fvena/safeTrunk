---
description: 
globs: 
alwaysApply: true
---
# Module Design and Public API

Guidelines for module design, code organization, and public API design for this TypeScript library.

## Module Structure & Organization

- Organize code into cohesive modules with single purpose
- Use barrel files (index.ts) for public exports
- Structure directories by domain/feature, not by type
- Maintain clear boundaries with well-defined interfaces
- Avoid circular dependencies
- Use subpath exports for specific modules

## Public API Design

- Create intuitive APIs that are difficult to use incorrectly
- Provide sensible defaults for optional parameters
- Maintain backward compatibility in updates
- Version breaking changes correctly
- Document public API completely with JSDoc and usage examples

## Export Conventions

- Export only what is part of the public API
- Use named exports for most functionality
- Implement default exports only when appropriate
- Clearly distinguish between public and internal exports
- Use type exports for types only used at compile time

## Interface Design

- Create small, composable interfaces with single purpose
- Follow interface segregation principle (ISP)
- Design for extensibility when appropriate
- Use utility types for variations (Partial, Pick, etc.)
- Maintain consistent interfaces across related modules

## Module Patterns

- Use revealing module pattern when appropriate
- Implement lazy initialization for heavy modules
- Use factory functions to create module instances
- Use import type for imports used only in types
- Implement dynamic imports for code splitting when beneficial

## Configuration

- Create options with sensible defaults and validation
- Use partial application to configure components
- Provide builders for complex configuration
- Preserve immutability in configuration options
- Implement type validation for configurations

## Versioning

- Follow semantic versioning strictly
- Mark experimental or unstable APIs
- Implement deprecation warnings before removing functionality
- Provide migration tools for major changes
- Document breaking changes thoroughly

## Extensibility & Interoperability

- Design for extension, closed for modification (Open/Closed)
- Implement hooks or extension points at strategic locations
- Design for interoperability with TypeScript/JavaScript ecosystem
- Provide adapters for integration with other libraries
- Support both Node.js and browser environments when possible

## Plugin System

- Plugins must implement the SafeTrunkPlugin interface
- Register through the PluginManager
- Use the event system for inter-plugin communication
- Define clear hooks for extension points
- Include version compatibility information

## Design Patterns

- Use Strategy Pattern for different execution strategies
- Apply Observer Pattern for event notifications
- Implement Factory Method for creating instances
- Use Dependency Injection for testing and extensibility
- Apply Command Pattern and Chain of Responsibility when appropriate