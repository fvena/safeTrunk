---
description: Testing Guidelines for TypeScript Library
globs: test/**, src/**/*.test.ts
alwaysApply: false
---
# Testing Guidelines

These rules provide guidance for implementing and maintaining tests for this TypeScript library project.

## Framework & Organization

- Use Vitest with describe/it pattern and proper assertions
- Group related tests in descriptive `describe` blocks
- Name tests descriptively to document behavior
- Use appropriate hooks (beforeEach, afterEach) for setup/teardown
- Maintain separation between unit and integration tests
- Name test files consistently with implementation files

## Coverage & Quality

- Test all public APIs, including success paths, error paths, and edge cases
- Write deterministic, independent tests that don't rely on execution order
- Focus on behavior, not implementation details
- Keep tests simple, readable, and focused on a single unit of work
- Test boundary conditions and error scenarios

## Unit vs Integration Testing

**Unit Tests:**
- Mock external dependencies
- Test functions in isolation
- Keep fast and focused

**Integration Tests:**
- Minimize mocking, test component interactions
- Use realistic data and verify end-to-end behavior
- Focus on component boundaries and communication

## Test Data & Mocking

- Use fixtures or factory functions for consistent test data
- Mock external dependencies, not internal implementation
- Reset mocks between tests
- Verify mock interactions when behavior depends on them
- Create reusable mock factories for common dependencies

## Asynchronous & Type Testing

- Use async/await for asynchronous tests
- Test both resolution and rejection paths
- Verify type contracts where appropriate
- Test generic functions with different type parameters

## Maintenance

- Keep tests up-to-date with implementation changes
- Fix flaky tests promptly
- Remove tests for removed functionality
- Document test requirements and assumptions

## Test-Driven Development

- Consider writing tests before implementation
- Use tests to drive API design
- Start with simple test cases and add edge cases incrementally

## Performance Testing

- Establish baselines for performance-critical functions
- Keep performance tests separate from functional tests
- Document performance expectations